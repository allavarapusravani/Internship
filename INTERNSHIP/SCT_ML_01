import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Sample dataset
data = {
    'square_feet': [1500, 1600, 1700, 1800, 2000, 2200, 2500, 3000, 3200, 3500],
    'bedrooms': [3, 3, 3, 4, 4, 4, 4, 5, 5, 5],
    'bathrooms': [2, 2, 2, 3, 2, 3, 3, 4, 3, 4],
    'price': [300000, 320000, 340000, 360000, 400000, 420000, 450000, 500000, 520000, 550000]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Define features and target
X = df[['square_feet', 'bedrooms', 'bathrooms']]
y = df['price']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R^2 Score:", r2_score(y_test, y_pred))

# Display coefficients
print("\nModel Coefficients:")
print(f"Intercept: {model.intercept_}")
for feature, coef in zip(X.columns, model.coef_):
    print(f"{feature}: {coef}")

# Optional: Plot predictions vs actual
plt.scatter(y_test, y_pred)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.grid(True)
plt.show()